# Unit test pipeline for PowerShell Desktop platform
# This pipeline uses the Pester test framework to
# execute unit tests for the module.
# https://aka.ms/yaml

trigger:
  - main

variables:
  TEST_OUTPUT_DIRECTORY: './test/results'
  TEST_OUTPUT_FILE: pester-testresults.xml
  TEST_SAMPLES_OUTPUT_FILE: sample-testresults.xml
  TEST_INTEGRATION_OUTPUT_FILE: integration-testresults.xml
  TEST_APPID: 7cb1941c-080a-406a-8d4c-0bd8b06c37c9
  TEST_APPTENANT: cb494bd3-5606-4ab6-bc24-d8187b172b2b

jobs:
- job: BuildWithTests
  displayName: 'Build and test PowerShell module'
  strategy:
    matrix:
      PowerShellDesktop:
        VM_IMAGE: 'windows-latest'
        OS_PLATFORM: 'windows'
        USE_POWERSHELL_CORE: false
      PowerShellCoreWindows:
        VM_IMAGE: 'windows-latest'
        OS_PLATFORM: 'windows'
        USE_POWERSHELL_CORE: true
      PowerShellCoreUbuntu:
        VM_IMAGE: 'ubuntu-latest'
        OS_PLATFORM: 'ubuntu'
        USE_POWERSHELL_CORE: true
  pool:
    vmImage: $(VM_IMAGE)
  steps:
  - checkout: self
  - task: AzureKeyVault@2
    inputs:
      azureSubscription: 'Azure Free Trial(439deb75-e36b-4569-b075-f2c2448e8a3e)'
      KeyVaultName: 'CI-AutoGraphPS-SDK'
      SecretsFilter: '*'
      RunAsPreJob: false
  - task: powershell@2
    displayName: 'Show that we can get a secret'
    inputs:
      targetType: inline
      script: 'echo $(CI-Test-Secret) | out-null'
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
    displayName: 'Show current PowerShell version information'
    inputs:
      targetType: inline
      script: 'echo $PSVersionTable'
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
    displayName: 'Get original Pester test framework module version'
    inputs:
      targetType: inline
      script: 'Get-Module Pester -ListAvailable'
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
    displayName: 'Install Pester test framework required version'
    inputs:
      targetType: inline
      script: 'Install-Module Pester -RequiredVersion 4.8.1 -scope currentuser -force'
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
    displayName: 'Get updated Pester test framework module version'
    inputs:
      targetType: inline
      script: 'Get-Module Pester -ListAvailable'
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
    displayName: 'Clean build'
    inputs:
      targetType: inline
      script: './build/clean-build.ps1'
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
    displayName: 'Install and configure build tools'
    inputs:
      targetType: inline
      script: './build/configure-tools.ps1 -Force -Verbose'
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
    displayName: 'Install .net dependencies'
    inputs:
      targetType: inline
      script: './build/configure-tools.ps1; ./build/install.ps1'
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
    displayName: 'Build module package'
    inputs:
      targetType: inline
      script: './build/configure-tools.ps1; ./build/build-package -verbose;'
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
    displayName: 'Publish module for local testing'
    condition: true
    inputs:
      targetType: inline
      script: './build/configure-tools.ps1; ./build/publish-moduletodev.ps1' # Creates .devmodule directory
      pwsh: false
  - task: powershell@2
    displayName: 'Create test output directory'
    inputs:
      targetType: inline
      script: '. ./build/common-build-functions.ps1;psmkdir -name $env:TEST_OUTPUT_DIRECTORY'
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
    displayName: 'Run tests'
    condition: eq(variables.OS_PLATFORM, 'windows') # Only on Windows because this hangs on Linux
    inputs:
      targetType: inline
      script: si env:TEST_OUTPUT_PATH "$($env:TEST_OUTPUT_DIRECTORY)/$($env:TEST_OUTPUT_FILE)"; ./build/import-devmodule.ps1 -initialcommand 'Invoke-Pester -OutputFile $env:TEST_OUTPUT_PATH -OutputFormat NUnitXml' -Wait -ReuseConsole
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
    displayName: 'Run tests directly'
    condition: eq(variables.OS_PLATFORM, 'ubuntu') # Only needed on Linux to avoid hangs
    inputs:
      targetType: inline
      script: './build/Init-DirectTestRun.ps1 -verbose; Invoke-Pester -OutputFile "$($env:TEST_OUTPUT_DIRECTORY)/$($env:TEST_OUTPUT_FILE)" -OutputFormat NUnitXml'
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
    displayName: 'Generate sample documents and tests'
    inputs:
      targetType: inline
      script: './samples/Generate-SampleTestScripts.ps1 -verbose'
      pwsh: $(USE_POWERSHELL_CORE)
  - task: powershell@2
     displayName: 'Run sample code integration tests'
     inputs:
       targetType: inline
       script: '$appCert = ./test/CI/Get-CIPipelineCredential.ps1 $env:CI-Test-Secret; ./test/Initialize-IntegrationTestEnvironment.ps1 -TestAppId $env:TEST_APPID -TestAppTenant $env:TEST_APPTENANT -TestAppCertificate $appCert'
       pwsh: $(USE_POWERSHELL_CORE)
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: $(TEST_OUTPUT_DIRECTORY)/$(TEST_OUTPUT_FILE)
      failTaskOnFailedTests: true
